name: Full CI/CD Deployment to EC2

on:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: portfolio-app

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build Docker image
      run: |
        docker build -t $ECR_REPOSITORY .
        docker tag $ECR_REPOSITORY:latest ${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:latest

    - name: Push Docker image to ECR
      run: |
        docker push ${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:latest

    - name: Prepare Image URI
      run: |
        echo "IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:latest" >> $GITHUB_ENV

    - name: Decode SSH key
      run: |
        echo "${{ secrets.EC2_SSH_KEY_B64 }}" | base64 -d > private_key.pem
        chmod 600 private_key.pem

    - name: Deploy on EC2 via SSH
      env:
        IMAGE_URI: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
      run: |
        ssh -o StrictHostKeyChecking=no -i private_key.pem \
        AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
        AWS_REGION=${{ env.AWS_REGION }} \
        DB_HOST=${{ secrets.DB_HOST }} \
        DB_NAME=${{ secrets.DB_NAME }} \
        DB_USER=${{ secrets.DB_USER }} \
        DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
        ubuntu@${{ secrets.EC2_HOST }} \
        "aws ecr get-login-password --region $AWS_REGION | sudo docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }} && \
        sudo docker pull $IMAGE_URI && \
        sudo docker stop portfolio-container || true && \
        sudo docker rm portfolio-container || true && \
        sudo docker run -d -p 80:5000 \
          --name portfolio-container \
          -e DB_HOST=$DB_HOST \
          -e DB_NAME=$DB_NAME \
          -e DB_USER=$DB_USER \
          -e DB_PASSWORD=$DB_PASSWORD \
          $IMAGE_URI"

